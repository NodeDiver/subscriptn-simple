// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String?   @unique
  email         String?   @unique
  passwordHash  String?   @map("password_hash")
  name          String?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  servers       Server[]  @relation("ServerOwner")
  shops         Shop[]    @relation("ShopOwner")
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  // Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Server {
  id              Int       @id @default(autoincrement())
  name            String
  hostUrl         String    @unique @map("host_url")
  apiKey          String    @map("api_key")
  ownerId         Int       @map("owner_id")
  description     String?
  isPublic        Boolean   @default(true) @map("is_public")
  slotsAvailable  Int       @default(21) @map("slots_available")
  lightningAddress String?  @map("lightning_address")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations
  owner           User      @relation("ServerOwner", fields: [ownerId], references: [id])
  shops           Shop[]
  
  @@map("servers")
}

model Shop {
  id                Int       @id @default(autoincrement())
  name              String
  lightningAddress  String?   @map("lightning_address")
  serverId          Int       @map("server_id")
  ownerId           Int       @map("owner_id")
  subscriptionStatus String   @default("active") @map("subscription_status")
  isPublic          Boolean   @default(true) @map("is_public")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  // Relations
  server            Server    @relation(fields: [serverId], references: [id])
  owner             User      @relation("ShopOwner", fields: [ownerId], references: [id])
  subscriptions     Subscription[]
  
  @@unique([name, serverId])
  @@map("shops")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  shopId    Int      @map("shop_id")
  amountSats Int     @map("amount_sats")
  interval  String
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  
  // NWC Connection for payments
  nwcConnectionString String? @map("nwc_connection_string") // Encrypted NWC connection string
  nwcEncryptedKey     String? @map("nwc_encrypted_key")     // Additional encryption layer
  
  // Relations
  shop      Shop     @relation(fields: [shopId], references: [id])
  payments  SubscriptionHistory[]
  
  @@map("subscriptions")
}

model SubscriptionHistory {
  id            Int      @id @default(autoincrement())
  subscriptionId Int     @map("subscription_id")
  paymentAmount Int      @map("payment_amount")
  paymentDate   DateTime @default(now()) @map("payment_date")
  status        String
  paymentMethod String?  @map("payment_method")
  walletProvider String? @map("wallet_provider")
  preimage      String?
  
  // Relations
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
  
  @@map("subscription_history")
}
