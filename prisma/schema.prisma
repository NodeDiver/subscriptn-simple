// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MODELS
// ============================================

model User {
  id            Int       @id @default(autoincrement())
  username      String?   @unique
  email         String?   @unique
  passwordHash  String?   @map("password_hash")
  name          String?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  providers     InfrastructureProvider[]  @relation("ProviderOwner")
  shops         Shop[]                    @relation("ShopOwner")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// INFRASTRUCTURE PROVIDER MODELS
// ============================================

enum ServiceType {
  BTCPAY_SERVER       // BTCPay Server
  BLFS                // Bitcoin Lightning File System
  OTHER               // Other Bitcoin services
}

model InfrastructureProvider {
  id                Int         @id @default(autoincrement())
  name              String
  description       String?     @db.Text
  logoUrl           String?     @map("logo_url")
  serviceType       ServiceType @map("service_type")

  // Contact & Connection Info
  website           String?
  contactEmail      String?     @map("contact_email")
  lightningAddress  String?     @map("lightning_address")

  // Pricing & Technical Details (JSON for flexibility)
  pricingTiers      Json?       @map("pricing_tiers")      // Array of pricing objects
  technicalSpecs    Json?       @map("technical_specs")    // Object with capabilities

  // Features
  isPublic          Boolean     @default(true) @map("is_public")
  supportsNwc       Boolean     @default(false) @map("supports_nwc")
  slotsAvailable    Int?        @map("slots_available")    // Optional capacity limit

  // Metadata
  ownerId           Int         @map("owner_id")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relations
  owner             User        @relation("ProviderOwner", fields: [ownerId], references: [id])
  connections       Connection[]

  @@map("infrastructure_providers")
}

// ============================================
// SHOP MODELS
// ============================================

model Shop {
  id                  Int       @id @default(autoincrement())
  name                String
  description         String?   @db.Text
  logoUrl             String?   @map("logo_url")

  // Location (for map view)
  address             String?
  latitude            Float?
  longitude           Float?
  isPhysicalLocation  Boolean   @default(false) @map("is_physical_location")

  // Contact & Website
  website             String?
  contactEmail        String?   @map("contact_email")
  lightningAddress    String?   @map("lightning_address")

  // Settings
  acceptsBitcoin      Boolean   @default(true) @map("accepts_bitcoin")
  isPublic            Boolean   @default(true) @map("is_public")

  // Metadata
  ownerId             Int       @map("owner_id")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  owner               User        @relation("ShopOwner", fields: [ownerId], references: [id])
  connections         Connection[]

  @@map("shops")
}

// ============================================
// CONNECTION MODEL (Shop-Provider Relationship)
// ============================================

enum ConnectionType {
  PAID_SUBSCRIPTION   // Shop pays provider via NWC
  FREE_LISTING        // Free connection
  SELF_REPORTED       // Shop claims to use provider (not verified)
}

enum ConnectionStatus {
  ACTIVE
  PENDING
  DISCONNECTED
}

model Connection {
  id                  Int               @id @default(autoincrement())
  shopId              Int               @map("shop_id")
  providerId          Int               @map("provider_id")
  connectionType      ConnectionType    @map("connection_type")
  status              ConnectionStatus  @default(PENDING)

  // NWC Payment Data (only for PAID_SUBSCRIPTION)
  nwcConnectionString String?           @map("nwc_connection_string") @db.Text  // Encrypted
  subscriptionAmount  Int?              @map("subscription_amount")            // Sats
  subscriptionInterval String?          @map("subscription_interval")          // monthly, yearly, etc.

  // Metadata
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  // Relations
  shop                Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)
  provider            InfrastructureProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  payments            PaymentHistory[]

  @@unique([shopId, providerId])
  @@map("connections")
}

// ============================================
// PAYMENT HISTORY (for NWC subscriptions)
// ============================================

model PaymentHistory {
  id              Int         @id @default(autoincrement())
  connectionId    Int         @map("connection_id")
  paymentAmount   Int         @map("payment_amount")      // Sats
  paymentDate     DateTime    @default(now()) @map("payment_date")
  status          String                                  // success, failed, pending
  paymentMethod   String?     @map("payment_method")      // NWC, manual, etc.
  walletProvider  String?     @map("wallet_provider")     // Alby, Zeus, etc.
  preimage        String?                                 // Lightning preimage
  errorMessage    String?     @map("error_message")       // If failed

  // Relations
  connection      Connection  @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@map("payment_history")
}
